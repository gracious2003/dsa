// Part (b)
#include <stdlib.h>

#define MAX_STUDENTS 100

Student students[MAX_STUDENTS];
int numStudents = 0;

void createStudent() {
    if (numStudents >= MAX_STUDENTS) {
        printf("Maximum number of students reached.\n");
        return;
    }

    Student newStudent;
    printf("Enter student name: ");
    fgets(newStudent.name, MAX_NAME_LEN, stdin);
    newStudent.name[strcspn(newStudent.name, "\n")] = '\0';

    printf("Enter date of birth (YYYY-MM-DD): ");
    fgets(newStudent.dob, MAX_DOB_LEN, stdin);
    newStudent.dob[strcspn(newStudent.dob, "\n")] = '\0';

    printf("Enter registration number: ");
    fgets(newStudent.regNum, REG_NUM_LEN + 1, stdin);
    newStudent.regNum[strcspn(newStudent.regNum, "\n")] = '\0';

    printf("Enter program code: ");
    fgets(newStudent.progCode, MAX_PROG_CODE_LEN + 1, stdin);
    newStudent.progCode[strcspn(newStudent.progCode, "\n")] = '\0';

    printf("Enter annual tuition: ");
    scanf("%f", &newStudent.annualTuition);
    getchar(); // Consume newline character

    students[numStudents++] = newStudent;
    printf("Student created successfully.\n");
}

void readStudent() {
    if (numStudents == 0) {
        printf("No students found.\n");
        return;
    }

    int regNum;
    printf("Enter registration number: ");
    scanf("%d", &regNum);
    getchar(); // Consume newline character

    for (int i = 0; i < numStudents; i++) {
        if (atoi(students[i].regNum) == regNum) {
            printf("Name: %s\n", students[i].name);
            printf("Date of Birth: %s\n", students[i].dob);
            printf("Registration Number: %s\n", students[i].regNum);
            printf("Program Code: %s\n", students[i].progCode);
            printf("Annual Tuition: %.2f\n", students[i].annualTuition);
            return;
        }
    }

    printf("Student not found.\n");
}

void updateStudent() {
    if (numStudents == 0) {
        printf("No students found.\n");
        return;
    }

    int regNum;
    printf("Enter registration number: ");
    scanf("%d", &regNum);
    getchar(); // Consume newline character

    for (int i = 0; i < numStudents; i++) {
        if (atoi(students[i].regNum) == regNum) {
            printf("Enter new student name: ");
            fgets(students[i].name, MAX_NAME_LEN, stdin);
            students[i].name[strcspn(students[i].name, "\n")] = '\0';

            printf("Enter new date of birth (YYYY-MM-DD): ");
            fgets(students[i].dob, MAX_DOB_LEN, stdin);
            students[i].dob[strcspn(students[i].dob, "\n")] = '\0';

            printf("Enter new program code: ");
            fgets(students[i].progCode, MAX_PROG_CODE_LEN + 1, stdin);
            students[i].progCode[strcspn(students[i].progCode, "\n")] = '\0';

            printf("Enter new annual tuition: ");
            scanf("%f", &students[i].annualTuition);
            getchar(); // Consume newline character

            printf("Student updated successfully.\n");
            return;
        }
    }

    printf("Student not found.\n");
}

void deleteStudent() {
    if (numStudents == 0) {
        printf("No students found.\n");
        return;
    }

    int regNum;
    printf("Enter registration number: ");
    scanf("%d", &regNum);
    getchar(); // Consume newline character

    for (int i = 0; i < numStudents; i++) {
        if (atoi(students[i].regNum) == regNum) {
            for (int j = i; j < numStudents - 1; j++) {
                students[j] = students[j + 1];
            }
            numStudents--;
            printf("Student deleted successfully.\n");
            return;
        }
    }

    printf("Student not found.\n");
}
